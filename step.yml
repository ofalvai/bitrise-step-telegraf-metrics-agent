#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  telegraf-metrics-agent
summary: |
  Starts Telegraf in the background to collect system metrics during the build
description: |
  TODO
website: https://github.com/ofalvai/bitrise-step-telegraf-metrics-agent
source_code_url: https://github.com/ofalvai/bitrise-step-telegraf-metrics-agent
support_url: https://github.com/ofalvai/bitrise-step-telegraf-metrics-agent/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04

type_tags:
  - utility

is_requires_admin_user: true
is_always_run: true
is_skippable: true
run_if: ""

deps:
  brew:
  - name: telegraf


toolkit:
  go:
    package_name: github.com/ofalvai/bitrise-step-telegraf-metrics-agent


inputs:
  - telegraf_conf: |
      # Global tags can be specified here in key="value" format.
      [global_tags]
        app = "$BITRISE_APP_SLUG"
        build = "$BITRISE_BUILD_SLUG"
        build_number = "$BITRISE_BUILD_NUMBER"

      [agent]
        interval = "10s"
        round_interval = false
        metric_batch_size = 10
        metric_buffer_limit = 100
        collection_jitter = "2s"
        flush_interval = "5s"
        flush_jitter = "0s"
        precision = ""

        logtarget = "file"
        logfile = "$BITRISE_DEPLOY_DIR/telegraf.log"

      [[outputs.file]]
        files = ["$BITRISE_DEPLOY_DIR/metrics.out"]
        data_format = "influx"

      [[inputs.cpu]]
        ## Whether to report per-cpu stats or not
        percpu = true
        ## Whether to report total system cpu stats or not
        totalcpu = true
        ## If true, collect raw CPU time metrics
        collect_cpu_time = false
        ## If true, compute and report the sum of all non-idle CPU states
        report_active = false


      # Read metrics about disk usage by mount point
      [[inputs.disk]]
        ## By default stats will be gathered for all mount points.
        ## Set mount_points will restrict the stats to only the specified mount points.
        # mount_points = ["/"]

        ## Ignore mount points by filesystem type.
        ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]


      # Read metrics about disk IO by device
      [[inputs.diskio]]
        ## By default, telegraf will gather stats for all devices including
        ## disk partitions.
        ## Setting devices will restrict the stats to the specified devices.
        # devices = ["sda", "sdb", "vd*"]
        ## Uncomment the following line if you need disk serial numbers.
        # skip_serial_number = false
        #
        ## On systems which support it, device metadata can be added in the form of
        ## tags.
        ## Currently only Linux is supported via udev properties. You can view
        ## available properties for a device by running:
        ## 'udevadm info -q property -n /dev/sda'
        ## Note: Most, but not all, udev properties can be accessed this way. Properties
        ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
        # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
        #
        ## Using the same metadata source as device_tags, you can also customize the
        ## name of the device via templates.
        ## The 'name_templates' parameter is a list of templates to try and apply to
        ## the device. The template may contain variables in the form of '$PROPERTY' or
        ## '${PROPERTY}'. The first template which does not contain any variables not
        ## present for the device is used as the device name tag.
        ## The typical use case is for LVM volumes, to get the VG/LV name instead of
        ## the near-meaningless DM-0 name.
        # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

      [[inputs.mem]]
        # no configuration

      # Read metrics about system load & uptime
      [[inputs.system]]
        ## Uncomment to remove deprecated metrics.
        # fielddrop = ["uptime_format"]

      # Gather metrics about network interfaces
      [[inputs.net]]
        ## By default, telegraf gathers stats from any up interface (excluding loopback)
        ## Setting interfaces will tell it to gather these explicit interfaces,
        ## regardless of status. When specifying an interface, glob-style
        ## patterns are also supported.
        ##
        # interfaces = ["eth*", "enp0s[0-1]", "lo"]
        ##
        ## On linux systems telegraf also collects protocol stats.
        ## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
        ##
        # ignore_protocol_stats = false
        ##

      [[inputs.procstat]]
        ## PID file to monitor process
        # pid_file = "/var/run/nginx.pid"
        ## executable name (ie, pgrep <exe>)
        # exe = "nginx"
        ## pattern as argument for pgrep (ie, pgrep -f <pattern>)
        # pattern = "nginx"
        ## user as argument for pgrep (ie, pgrep -u <user>)
        user = "vagrant" # BITRISE SPECIFIC: use "root" for Ubuntu stacks

        ## Systemd unit name
        # systemd_unit = "nginx.service"
        ## CGroup name or path
        # cgroup = "systemd/system.slice/nginx.service"

        ## Windows service name
        # win_service = ""

        ## override for process_name
        ## This is optional; default is sourced from /proc/<pid>/status
        # process_name = "bar"

        ## Field name prefix
        # prefix = ""

        ## When true add the full cmdline as a tag.
        # cmdline_tag = false

        ## Mode to use when calculating CPU usage. Can be one of 'solaris' or 'irix'.
        # mode = "irix"

        ## Add the PID as a tag instead of as a field.  When collecting multiple
        ## processes with otherwise matching tags this setting should be enabled to
        ## ensure each process has a unique identity.
        ##
        ## Enabling this option may result in a large number of series, especially
        ## when processes have a short lifetime.
        # pid_tag = false

        ## Method to use when finding process IDs.  Can be one of 'pgrep', or
        ## 'native'.  The pgrep finder calls the pgrep executable in the PATH while
        ## the native finder performs the search directly in a manor dependent on the
        ## platform.  Default is 'pgrep'
        # pid_finder = "native"
    opts:
      title: Telegraf config
      summary: Contents of Telegraf configuration file (telegraf.conf)
      description: |
        Contents of Telegraf configuration file (telegraf.conf). For more information, refer to [Telegraf's documentation](https://docs.influxdata.com/telegraf/v1.18/administration/configuration/)
      is_expand: true
      is_required: true
